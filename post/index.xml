<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on codedump</title>
    <link>https://codedump.info/post/</link>
    <description>Recent content in Posts on codedump</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 08 Jun 2019 11:09:10 +0800</lastBuildDate>
    
	<atom:link href="https://codedump.info/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>IM服务器设计-基础</title>
      <link>https://codedump.info/post/20190608-im-design-base/</link>
      <pubDate>Sat, 08 Jun 2019 11:09:10 +0800</pubDate>
      
      <guid>https://codedump.info/post/20190608-im-design-base/</guid>
      <description>IM做为非常经典的服务器系统，其设计时候的考量具备代表性，所以这一次花几个篇幅讨论其相关设计。 整体架构 以上架构图中，分为几个部分： 客户端：支</description>
    </item>
    
    <item>
      <title>OpenResty Lua Stream实现分析</title>
      <link>https://codedump.info/post/20190501-lua-stream/</link>
      <pubDate>Wed, 01 May 2019 15:03:45 +0800</pubDate>
      
      <guid>https://codedump.info/post/20190501-lua-stream/</guid>
      <description>概述 OpenResty（以下简称OR）是Lua应用的典范，其最大的亮点在于，使用Lua协程搭配上异步非阻塞的IO，这样开发者可以使用同步方式</description>
    </item>
    
    <item>
      <title>redis高可用原理</title>
      <link>https://codedump.info/post/20190409-redis-sentinel/</link>
      <pubDate>Sun, 21 Apr 2019 22:52:16 +0800</pubDate>
      
      <guid>https://codedump.info/post/20190409-redis-sentinel/</guid>
      <description>redis中为了实现高可用（High Availability，简称HA），采用了如下两个方式： 主从复制数据。 采用哨兵监控数据节点的运行情况，</description>
    </item>
    
    <item>
      <title>《数据密集型应用系统设计》第九章《一致性与共识》笔记</title>
      <link>https://codedump.info/post/20190406-ddia-chapter09-consistency-and-consensus/</link>
      <pubDate>Thu, 18 Apr 2019 08:40:34 +0800</pubDate>
      
      <guid>https://codedump.info/post/20190406-ddia-chapter09-consistency-and-consensus/</guid>
      <description>一致性保证 最终一致性（eventual consistency）：如果停止更新数据，等待一段时间（时间长度未知），则最终所有读请求将返回相同的</description>
    </item>
    
    <item>
      <title>《数据密集型应用系统设计》第八章《分布式系统的挑战》笔记</title>
      <link>https://codedump.info/post/20190405-ddia-chapter08-the-trouble-with-distributed-system/</link>
      <pubDate>Tue, 16 Apr 2019 21:03:16 +0800</pubDate>
      
      <guid>https://codedump.info/post/20190405-ddia-chapter08-the-trouble-with-distributed-system/</guid>
      <description>本章描述分布式系统中可能出现的各种问题。 故障与部分失效 单机上的程序，以一种确定性的方式运行：要么工作，要么出错。 然而涉及到多台节点时，会出现</description>
    </item>
    
    <item>
      <title>线上存储服务崩溃问题分析记录</title>
      <link>https://codedump.info/post/20190413-problem-fix/</link>
      <pubDate>Sat, 13 Apr 2019 12:04:59 +0800</pubDate>
      
      <guid>https://codedump.info/post/20190413-problem-fix/</guid>
      <description>注：本文为重新发布2017-06-17所写博客，以下为正文部分。 上周我们的存储服务在某个线上项目频繁出现崩溃，花了几天的时间来查找解决该问题</description>
    </item>
    
    <item>
      <title>《数据密集型应用系统设计》第七章《事务》笔记</title>
      <link>https://codedump.info/post/20190403-ddia-chapter07-transaction/</link>
      <pubDate>Wed, 03 Apr 2019 22:33:58 +0800</pubDate>
      
      <guid>https://codedump.info/post/20190403-ddia-chapter07-transaction/</guid>
      <description>事务提供了一种机制，应用程序可以把一组读和写操作放在一个逻辑单元里，所有在一个事务的读和写操作会被视为一个操作：要么全部失败，要么全部成功，</description>
    </item>
    
    <item>
      <title>《数据密集型应用系统设计》第六章数据分区笔记</title>
      <link>https://codedump.info/post/20181124-ddia-chapter06-partitioning/</link>
      <pubDate>Tue, 02 Apr 2019 22:17:24 +0800</pubDate>
      
      <guid>https://codedump.info/post/20181124-ddia-chapter06-partitioning/</guid>
      <description>键值数据的分区 基于关键字区间的分区 给每个分区分配一段连续的关键字或者关键字区间（以最小值和最大值来指示），从关键字区间的上下限可以确定哪个分</description>
    </item>
    
    <item>
      <title>《数据密集型应用系统设计》第五章数据复制笔记</title>
      <link>https://codedump.info/post/20181118-ddia-chapter05-replication/</link>
      <pubDate>Mon, 01 Apr 2019 18:19:22 +0800</pubDate>
      
      <guid>https://codedump.info/post/20181118-ddia-chapter05-replication/</guid>
      <description>主从复制 集群中有一个主节点，写操作都必须经过主节点完成，读操作主从节点都可以处理。 同步复制和异步复制 同步复制 数据在副本上落盘才返回。 优点：保</description>
    </item>
    
    <item>
      <title>如何阅读一份源代码？</title>
      <link>https://codedump.info/post/20190324-how-to-read-code/</link>
      <pubDate>Sun, 24 Mar 2019 09:41:21 +0800</pubDate>
      
      <guid>https://codedump.info/post/20190324-how-to-read-code/</guid>
      <description>阅读源代码的能力算是程序员的一种底层基础能力之一，这个能力之所以重要，原因在于： 不可避免的需要阅读或者接手他人的项目。比如调研一个开源项目，</description>
    </item>
    
    <item>
      <title>TCP协议笔记</title>
      <link>https://codedump.info/post/20190227-tcp/</link>
      <pubDate>Wed, 27 Feb 2019 21:01:43 +0800</pubDate>
      
      <guid>https://codedump.info/post/20190227-tcp/</guid>
      <description>概述 应用层：通常也称为“七层”，这是大部分服务器工作的层次，如HTTP 服务器等，位于应用层上的信息分组成为报文（message）。识别不同应</description>
    </item>
    
    <item>
      <title>Leveldb代码阅读笔记</title>
      <link>https://codedump.info/post/20190215-leveldb/</link>
      <pubDate>Fri, 15 Feb 2019 08:52:47 +0800</pubDate>
      
      <guid>https://codedump.info/post/20190215-leveldb/</guid>
      <description>本文基于leveldb 1.9.0代码。 整体架构 如上图，leveldb的数据存储在内存以及磁盘上，其中： memtable：存储在内存中的数据，</description>
    </item>
    
    <item>
      <title>Nginx源码阅读笔记-内存池的设计</title>
      <link>https://codedump.info/post/20190214-nginx-memory-pool/</link>
      <pubDate>Thu, 14 Feb 2019 14:48:24 +0800</pubDate>
      
      <guid>https://codedump.info/post/20190214-nginx-memory-pool/</guid>
      <description>nginx中所有请求都单独对应一个内存池，在这个请求的过程中，所有涉及到内存分配的地方，都到该请求相关的内存池中处理，而中间不会去释放回收内</description>
    </item>
    
    <item>
      <title>Nginx源码阅读笔记-处理HTTP请求</title>
      <link>https://codedump.info/post/20190213-nginx-process-http-request/</link>
      <pubDate>Wed, 13 Feb 2019 09:09:19 +0800</pubDate>
      
      <guid>https://codedump.info/post/20190213-nginx-process-http-request/</guid>
      <description>前面分析了nginx如何读取一个HTTP请求、如何查询到HTTP对应的配置，本节分析如何处理HTTP请求。 处理HTTP请求的11个阶段 ngi</description>
    </item>
    
    <item>
      <title>Nginx源码阅读笔记-查询HTTP配置流程</title>
      <link>https://codedump.info/post/20190212-nginx-http-config/</link>
      <pubDate>Tue, 12 Feb 2019 09:54:25 +0800</pubDate>
      
      <guid>https://codedump.info/post/20190212-nginx-http-config/</guid>
      <description>概述 前面已经分析过nginx解析配置文件的整体流程，接下来看查询HTTP配置的流程。 HTTP属于nginx的core顶层模块，下面又包括了三</description>
    </item>
    
    <item>
      <title>zeromq所谓的“无锁消息队列”</title>
      <link>https://codedump.info/post/20190209-zeromq-lockfree-queue/</link>
      <pubDate>Sat, 09 Feb 2019 20:10:13 +0800</pubDate>
      
      <guid>https://codedump.info/post/20190209-zeromq-lockfree-queue/</guid>
      <description>本文基于zeromq 4.3.0版本，分析其无锁消息队列的实现。 概述 zeromq这个网络库，有以下几个亮点： 从以往的面向TCP流的网络开发，变</description>
    </item>
    
    <item>
      <title>Nginx源码阅读笔记-接收HTTP请求流程</title>
      <link>https://codedump.info/post/20190131-nginx-read-http-request/</link>
      <pubDate>Fri, 01 Feb 2019 17:50:37 +0800</pubDate>
      
      <guid>https://codedump.info/post/20190131-nginx-read-http-request/</guid>
      <description>前面已经描述过nginx的事件模块了，接下来具体分析nginx如何接收一个HTTP请求，下一部分接着解析nginx解析HTTP请求的流程。 协</description>
    </item>
    
    <item>
      <title>Nginx源码阅读笔记-事件处理模块</title>
      <link>https://codedump.info/post/20190131-nginx-event/</link>
      <pubDate>Thu, 31 Jan 2019 21:12:01 +0800</pubDate>
      
      <guid>https://codedump.info/post/20190131-nginx-event/</guid>
      <description>大概做高性能服务器的，都绕不开事件处理模块来，一般一个事件模块，会分为以下几部分： 如何定义一个描述事件的数据结构。 如何在事件模块中支持定时器</description>
    </item>
    
    <item>
      <title>Nginx源码阅读笔记-Master Woker进程模型</title>
      <link>https://codedump.info/post/20190131-nginx-master-worker/</link>
      <pubDate>Thu, 31 Jan 2019 09:53:57 +0800</pubDate>
      
      <guid>https://codedump.info/post/20190131-nginx-master-worker/</guid>
      <description>master进程 Nginx采用的模型是master-worker模型，即： 由master进程负责创建worker进程，以及监控worker进</description>
    </item>
    
    <item>
      <title>Libuv代码简单分析</title>
      <link>https://codedump.info/post/20190123-libuv/</link>
      <pubDate>Wed, 23 Jan 2019 08:43:49 +0800</pubDate>
      
      <guid>https://codedump.info/post/20190123-libuv/</guid>
      <description>本文基于libuv 1.x版本进行简单的分析。 数据结构 uv__io_t uv__io_t用来表示一个IO事件。 其成员包括： 成员 说明 uv__io_cb cb IO事件被触发的回调函数</description>
    </item>
    
    <item>
      <title>Nginx源码阅读笔记-配置解析流程</title>
      <link>https://codedump.info/post/20190103-nginx-config-parse/</link>
      <pubDate>Thu, 03 Jan 2019 08:41:44 +0800</pubDate>
      
      <guid>https://codedump.info/post/20190103-nginx-config-parse/</guid>
      <description>本系列文章基于openresty-1.13.6.1版本的代码做的笔记，其对应的nginx源码版本是nginx-1.13.6。 模块与配置值解析</description>
    </item>
    
    <item>
      <title>Etcd存储的实现</title>
      <link>https://codedump.info/post/20181125-etcd-server/</link>
      <pubDate>Sun, 25 Nov 2018 15:13:28 +0800</pubDate>
      
      <guid>https://codedump.info/post/20181125-etcd-server/</guid>
      <description>在前面已经分析了Raft算法原理、etcd raft库的实现，接着就可以看etcd如何使用raft实现存储服务的了。 以下的分析主要针对etcd</description>
    </item>
    
    <item>
      <title>etcd Raft库解析</title>
      <link>https://codedump.info/post/20180922-etcd-raft/</link>
      <pubDate>Sat, 22 Sep 2018 11:01:02 +0800</pubDate>
      
      <guid>https://codedump.info/post/20180922-etcd-raft/</guid>
      <description>序言 今年初开始学习了解Raft协议，论文读下来之后还是决定结合一个成熟的代码进行更深的理解。etcd做为一个非常成熟的作品，其Raft库实现</description>
    </item>
    
    <item>
      <title>Raft算法原理</title>
      <link>https://codedump.info/post/20180921-raft/</link>
      <pubDate>Fri, 21 Sep 2018 20:15:32 +0800</pubDate>
      
      <guid>https://codedump.info/post/20180921-raft/</guid>
      <description>简介 关于Raft算法，有两篇经典的论文，一篇是《In search of an Understandable Consensus Algorithm》，这是作者最开始讲述Raft算法原理的论文，但是这篇论文太</description>
    </item>
    
  </channel>
</rss>