<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>系统设计 on codedump</title>
    <link>https://codedump.info/tags/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</link>
    <description>Recent content in 系统设计 on codedump</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 14 Dec 2019 22:41:22 +0800</lastBuildDate>
    
	<atom:link href="https://codedump.info/tags/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43;11中的内存模型下篇 - C&#43;&#43;11支持的几种内存模型</title>
      <link>https://codedump.info/post/20191214-cxx11-memory-model-2/</link>
      <pubDate>Sat, 14 Dec 2019 22:41:22 +0800</pubDate>
      
      <guid>https://codedump.info/post/20191214-cxx11-memory-model-2/</guid>
      <description>在本系列的上篇，介绍了内存模型的基本概念，接下来看C++11中支持的几种内存模型。 几种关系术语 在接着继续解释之前，先了解一下几种关系术语。 sequenced-before</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11中的内存模型上篇 - 内存模型基础</title>
      <link>https://codedump.info/post/20191214-cxx11-memory-model-1/</link>
      <pubDate>Sat, 14 Dec 2019 10:10:15 +0800</pubDate>
      
      <guid>https://codedump.info/post/20191214-cxx11-memory-model-1/</guid>
      <description>前段时间花了些精力研究C++11引入的内存模型相关的操作，于是把相关的知识都学习了一下，将这个学习过程整理为两篇文档，这是第一篇，主要分析内</description>
    </item>
    
    <item>
      <title>对比脚本型和编译型游戏服务器的热更新方案</title>
      <link>https://codedump.info/post/20191206-gameserver-hot-refresh/</link>
      <pubDate>Fri, 06 Dec 2019 22:40:49 +0800</pubDate>
      
      <guid>https://codedump.info/post/20191206-gameserver-hot-refresh/</guid>
      <description>本文对比游戏服务器中C++搭配脚本语言（Lua、Python）以及纯编译型语言（C++、Golang）来进行开发时，进行线上服务器热更新的方</description>
    </item>
    
    <item>
      <title>IM服务器设计-如何解决消息的乱序</title>
      <link>https://codedump.info/post/20191013-im-msg-out-of-order/</link>
      <pubDate>Sun, 13 Oct 2019 10:59:16 +0800</pubDate>
      
      <guid>https://codedump.info/post/20191013-im-msg-out-of-order/</guid>
      <description>IM消息需要面对的另一个难题：如何保证收到的消息不乱序。下面先展开看看要解决这个难题有哪些障碍。 消息乱序的原因 时间难以保证 既然谈到“顺序”，</description>
    </item>
    
    <item>
      <title>IM服务器设计-网关接入层</title>
      <link>https://codedump.info/post/20190818-im-msg-gate/</link>
      <pubDate>Sun, 18 Aug 2019 16:55:17 +0800</pubDate>
      
      <guid>https://codedump.info/post/20190818-im-msg-gate/</guid>
      <description>IM服务系列文章： IM服务器设计-基础 IM服务器设计-消息存储 网关接入层负责维护与客户端之间的长连接，由于它是唯一一个与客户端进行直接通信的</description>
    </item>
    
    <item>
      <title>服务调用的演进历史</title>
      <link>https://codedump.info/post/20190629-service-history/</link>
      <pubDate>Sat, 29 Jun 2019 12:47:07 +0800</pubDate>
      
      <guid>https://codedump.info/post/20190629-service-history/</guid>
      <description>这个题目稍微有点大，纯粹是一篇科普文，将我所了解到的解决“服务调用”相关的技术演进历史简述一下，本文专注于演化过程中每一步的为什么（Why）</description>
    </item>
    
    <item>
      <title>IM服务器设计-消息存储</title>
      <link>https://codedump.info/post/20190608-im-msg-storage/</link>
      <pubDate>Sat, 08 Jun 2019 20:18:47 +0800</pubDate>
      
      <guid>https://codedump.info/post/20190608-im-msg-storage/</guid>
      <description>这部分专门讲述IM消息存储的设计。消息存储的难度在于，要考虑以下的场景： 离线消息存储。即发送消息时对方不在线该怎么处理。 单聊、群聊消息。 随着</description>
    </item>
    
    <item>
      <title>IM服务器设计-基础</title>
      <link>https://codedump.info/post/20190608-im-design-base/</link>
      <pubDate>Sat, 08 Jun 2019 11:09:10 +0800</pubDate>
      
      <guid>https://codedump.info/post/20190608-im-design-base/</guid>
      <description>IM做为非常经典的服务器系统，其设计时候的考量具备代表性，所以这一次花几个篇幅讨论其相关设计。 主要内容相当部分参考了 一套海量在线用户的移动端</description>
    </item>
    
  </channel>
</rss>