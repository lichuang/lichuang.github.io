<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>系统设计 on codedump</title>
    <link>https://codedump.info/categories/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</link>
    <description>Recent content in 系统设计 on codedump</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 29 Jun 2019 12:47:07 +0800</lastBuildDate>
    
	<atom:link href="https://codedump.info/categories/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>服务调用的演进历史</title>
      <link>https://codedump.info/post/20190629-service-history/</link>
      <pubDate>Sat, 29 Jun 2019 12:47:07 +0800</pubDate>
      
      <guid>https://codedump.info/post/20190629-service-history/</guid>
      <description>这个题目稍微有点大，纯粹是一篇科普文，将我所了解到的解决“服务调用”相关的技术演进历史简述一下，本文专注于演化过程中每一步的为什么（Why）</description>
    </item>
    
    <item>
      <title>IM服务器设计-消息存储</title>
      <link>https://codedump.info/post/20190608-im-msg-storage/</link>
      <pubDate>Sat, 08 Jun 2019 20:18:47 +0800</pubDate>
      
      <guid>https://codedump.info/post/20190608-im-msg-storage/</guid>
      <description>这部分专门讲述IM消息存储的设计。消息存储的难度在于，要考虑以下的场景： 离线消息存储。即发送消息时对方不在线该怎么处理。 单聊、群聊消息。 随着</description>
    </item>
    
    <item>
      <title>IM服务器设计-基础</title>
      <link>https://codedump.info/post/20190608-im-design-base/</link>
      <pubDate>Sat, 08 Jun 2019 11:09:10 +0800</pubDate>
      
      <guid>https://codedump.info/post/20190608-im-design-base/</guid>
      <description>IM做为非常经典的服务器系统，其设计时候的考量具备代表性，所以这一次花几个篇幅讨论其相关设计。 主要内容相当部分参考了 一套海量在线用户的移动端</description>
    </item>
    
  </channel>
</rss>