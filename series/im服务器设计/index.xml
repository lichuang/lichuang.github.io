<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IM服务器设计 on codedump的网络日志</title>
    <link>https://www.codedump.info/series/im%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%BE%E8%AE%A1/</link>
    <description>Recent content in IM服务器设计 on codedump的网络日志</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2018 &lt;a href=&#34;https://www.codedump.info/&#34;&gt;codedump&lt;/a&gt;   
  &lt;a href=&#34;https://creativecommons.org/licenses/by-sa/4.0/&#34;&gt;CC BY-SA&lt;/a&gt;
&lt;/span&gt;
</copyright>
    <lastBuildDate>Sun, 13 Oct 2019 10:59:16 +0800</lastBuildDate><atom:link href="https://www.codedump.info/series/im%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%BE%E8%AE%A1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>IM服务器设计-如何解决消息的乱序</title>
      <link>https://www.codedump.info/post/20191013-im-msg-out-of-order/</link>
      <pubDate>Sun, 13 Oct 2019 10:59:16 +0800</pubDate>
      
      <guid>https://www.codedump.info/post/20191013-im-msg-out-of-order/</guid>
      <description>IM消息需要面对的另一个难题：如何保证收到的消息不乱序。下面先展开看看要解决这个难题有哪些障碍。 消息乱序的原因 时间难以保证 既然谈到“顺序”，就必然有一</description>
    </item>
    
    <item>
      <title>IM服务器设计-消息存储</title>
      <link>https://www.codedump.info/post/20190608-im-msg-storage/</link>
      <pubDate>Sat, 08 Jun 2019 20:18:47 +0800</pubDate>
      
      <guid>https://www.codedump.info/post/20190608-im-msg-storage/</guid>
      <description>这部分专门讲述IM消息存储的设计。消息存储的难度在于，要考虑以下的场景： 离线消息存储。即发送消息时对方不在线该怎么处理。 单聊、群聊消息。 随着用户量越来</description>
    </item>
    
    <item>
      <title>IM服务器设计-基础</title>
      <link>https://www.codedump.info/post/20190608-im-design-base/</link>
      <pubDate>Sat, 08 Jun 2019 11:09:10 +0800</pubDate>
      
      <guid>https://www.codedump.info/post/20190608-im-design-base/</guid>
      <description>IM做为非常经典的服务器系统，其设计时候的考量具备代表性，所以这一次花几个篇幅讨论其相关设计。 主要内容相当部分参考了 一套海量在线用户的移动端IM架构设</description>
    </item>
    
  </channel>
</rss>
