<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>codedump</title>
    <link>https://lichuang.github.io/</link>
    <description>Recent content on codedump</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 09 Feb 2019 20:10:13 +0800</lastBuildDate>
    
	<atom:link href="https://lichuang.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>zeromq所谓的“无锁消息队列”</title>
      <link>https://lichuang.github.io/post/20190209-zeromq-lockfree-queue/</link>
      <pubDate>Sat, 09 Feb 2019 20:10:13 +0800</pubDate>
      
      <guid>https://lichuang.github.io/post/20190209-zeromq-lockfree-queue/</guid>
      <description>本文基于zeromq 4.3.0版本，分析其无锁消息队列的实现。 概述 zeromq这个网络库，有以下几个亮点： 从以往的面向TCP流的网络开发，变</description>
    </item>
    
    <item>
      <title>Nginx源码阅读笔记-接收HTTP请求流程</title>
      <link>https://lichuang.github.io/post/20190131-nginx-read-http-request/</link>
      <pubDate>Fri, 01 Feb 2019 17:50:37 +0800</pubDate>
      
      <guid>https://lichuang.github.io/post/20190131-nginx-read-http-request/</guid>
      <description>前面已经描述过nginx的事件模块了，接下来具体分析nginx如何接收一个HTTP请求，下一部分接着解析nginx解析HTTP请求的流程。 协</description>
    </item>
    
    <item>
      <title>Nginx源码阅读笔记-事件处理模块</title>
      <link>https://lichuang.github.io/post/20190131-nginx-event/</link>
      <pubDate>Thu, 31 Jan 2019 21:12:01 +0800</pubDate>
      
      <guid>https://lichuang.github.io/post/20190131-nginx-event/</guid>
      <description>大概做高性能服务器的，都绕不开事件处理模块来，一般一个事件模块，会分为以下几部分： 如何定义一个描述事件的数据结构。 如何在事件模块中支持定时器</description>
    </item>
    
    <item>
      <title>Nginx源码阅读笔记-Master Woker进程模型</title>
      <link>https://lichuang.github.io/post/20190131-nginx-master-worker/</link>
      <pubDate>Thu, 31 Jan 2019 09:53:57 +0800</pubDate>
      
      <guid>https://lichuang.github.io/post/20190131-nginx-master-worker/</guid>
      <description>master进程 Nginx采用的模型是master-worker模型，即： 由master进程负责创建worker进程，以及监控worker进</description>
    </item>
    
    <item>
      <title>Libuv代码简单分析</title>
      <link>https://lichuang.github.io/post/20190123-libuv/</link>
      <pubDate>Wed, 23 Jan 2019 08:43:49 +0800</pubDate>
      
      <guid>https://lichuang.github.io/post/20190123-libuv/</guid>
      <description>本文基于libuv 1.x版本进行简单的分析。 数据结构 uv__io_t uv__io_t用来表示一个IO事件。 其成员包括： 成员 说明 uv__io_cb cb IO事件被触发的回调函数</description>
    </item>
    
    <item>
      <title>Nginx源码阅读笔记-配置解析流程</title>
      <link>https://lichuang.github.io/post/20190103-nginx-config-parse/</link>
      <pubDate>Thu, 03 Jan 2019 08:41:44 +0800</pubDate>
      
      <guid>https://lichuang.github.io/post/20190103-nginx-config-parse/</guid>
      <description>本系列文章基于openresty-1.13.6.1版本的代码做的笔记，其对应的nginx源码版本是nginx-1.13.6。 模块与配置值解析</description>
    </item>
    
    <item>
      <title>Etcd存储的实现</title>
      <link>https://lichuang.github.io/post/20181125-etcd-server/</link>
      <pubDate>Sun, 25 Nov 2018 15:13:28 +0800</pubDate>
      
      <guid>https://lichuang.github.io/post/20181125-etcd-server/</guid>
      <description>在前面已经分析了Raft算法原理、etcd raft库的实现，接着就可以看etcd如何使用raft实现存储服务的了。 以下的分析主要针对etcd</description>
    </item>
    
    <item>
      <title>etcd Raft库解析</title>
      <link>https://lichuang.github.io/post/20180922-etcd-raft/</link>
      <pubDate>Sat, 22 Sep 2018 11:01:02 +0800</pubDate>
      
      <guid>https://lichuang.github.io/post/20180922-etcd-raft/</guid>
      <description>序言 今年初开始学习了解Raft协议，论文读下来之后还是决定结合一个成熟的代码进行更深的理解。etcd做为一个非常成熟的作品，其Raft库实现</description>
    </item>
    
    <item>
      <title>Raft算法原理</title>
      <link>https://lichuang.github.io/post/20180921-raft/</link>
      <pubDate>Fri, 21 Sep 2018 20:15:32 +0800</pubDate>
      
      <guid>https://lichuang.github.io/post/20180921-raft/</guid>
      <description>简介 关于Raft算法，有两篇经典的论文，一篇是《In search of an Understandable Consensus Algorithm》，这是作者最开始讲述Raft算法原理的论文，但是这篇论文太</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://lichuang.github.io/page/about/</link>
      <pubDate>Thu, 20 Sep 2018 23:08:27 +0800</pubDate>
      
      <guid>https://lichuang.github.io/page/about/</guid>
      <description>网名“codedump”，不是“coredump”。取这个名字，是因为喜欢研究代码的原理，所以就取名“code dump”了。 正式出版作品 《L</description>
    </item>
    
  </channel>
</rss>